{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tempus Dominus Tempus Dominus is the successor to the very popular Eonasdan/bootstrap-datetimepicker. The plugin provide a robust date and time picker designed to integrate into your Bootstrap project. Get started Download Currently v5.1.3 Get awesome Dashboard Templates Looking for a template with the datepicker ready to go? Then get check out these templates from our partners. Creative Tim Material Pro Material Pro Angular Argon Pro Flatlogic Light Blue Html5 Sing App Html5 Flatlogic One Bootstrap Template Installation Include Tempus Dominus's source Sass and JavaScript files via npm npm i tempusdominus-bootstrap-4 Read installation docs CDNJS When you only need to include Tempus Dominus's compiled CSS or JS, you can use CDNJS. <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script> <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.0/moment.min.js\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/js/tempusdominus-bootstrap-4.min.js\" crossorigin=\"anonymous\"></script> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/css/tempusdominus-bootstrap-4.min.css\" crossorigin=\"anonymous\" /> Explore the docs","title":"Tempus Dominus Bootstrap 4"},{"location":"ContributorsGuide/","text":"This guide is aimed to contributors wishing to understand the internals of the code in order to change/evolve the component. Note: this guide refers to version 5 which is currently in alpha and will be updated as we progress Introduction This component consists actually of 2 subcomponent UI widgets one for the date and one for the time selection process. The developers can configure which of those are needed and also the granularity that the component will allow the users to select a date/time. Developers also choose the format that the selected date/time will be displayed in the input field. The component uses on jQuery , moment.js libraries. Code Private variables element - Holds the DOM element this instance is attached to options - Holds an object with the currently set options for the specific instance of the component. Don't directly change the properties of that object use the public API methods instead. DO NOT expose this object or its properties outside of the component. date - Holds the moment object for the model value of the component. DON'T directly change this variable unless you REALLY know what you are doing. Use setValue() function to set it. It handles all component logic for updating the model value and emitting all the appropriate events viewDate - Holds the currently selected value that the user has selected through the widget. This is not the model value this is the view value. Changing this usually requires a subsequent call to update() function unset - A boolean variable that holds whether the components model value is set or not. Model's value starts as unset = true and if is either set by the user or programmatically through the api to a valid value then it is set to false . If subsequent events lead to an invalid value then this variable is set to true again. Setting this variable usually takes place in the setValue() function. input - Hold the DOM input element this instance is attached to component - Holds a reference to the .input-group DOM element that the widget is attached or false if it is attached directly on an input field widget - Holds a reference to the DOM element containing the widget or false if the widget is hidden use24hours - Holds whether the component uses 24 hours format or not. This is initialized on the format() function minViewModeNumber - Holds the Numeric equivalent of the options.minViewMode parameter format - Holds the current format string that is used for formatting the date model value. Note this is not the same thing as the options.format as the second could be set to false in which case the first takes the locale's L or LT value currentViewMode - Hold the state of the current viewMode for the DatePicker subcomponent datePickerModes - An array of objects with configuration parameters for the different views of the DatePicker subcomponent viewModes - An array of strings containing all the possible strings that options.viewMode can take through viewMode() public api function directionModes - An array of strings containing all the possible strings that options.direction can take through direction() public api function orientationModes - An array of strings containing all the possible strings that options.orientation can take through orientation() public api function Private functions Events related notifyEvent(e) - Use this function when you want to send en event to listener this could be used as a filter later stopEvent(e) - Shortcut for stopping propagation of events keydown(e) - Function to trap change(e) - Listener function to track change events occurring on the input dom element the component is attached to attachDatePickerElementEvents() - Attaches listeners to the existing DOM elements the component is attached to. Called upon construction of each datetimepicker instance detachDatePickerElementEvents() - Detaches listeners from the DOM element the component is attached to. Called on destroy() attachDatePickerWidgetEvents() - Attaches listeners on the components widget. Called on show() detachDatePickerWidgetEvents() - Detaches listeners on the components widget. Called on hide() Model related setValue(targetMoment) - Sets the model value of the component takes a moment object. An error event will be emmited if the targetMoment does not pass the configured validations. Otherwise the date variable will be set and the relevant events will be fired. isValid(targetMoment, granularity) - returns true if the targetMoment moment object is valid according to the components set validation rules ( min/maxDates , disabled/enabledDates and daysOfWeekDisabled ). You may pass a second variable to check only up the the specific granularity year, month, day, hour, minute, second Utilities indexGivenDates (givenDatesArray) - Function that takes the array from enabledDates() and disabledDates() public functions and stores them as object keys to enable quick lookup isInEnableDates(date) - Checks whether if the given moment object exists in the options.enabledDates object isInDisableDates(date) - Checks whether if the given moment object exists in the options.disabledDates array dataToOptions() - Parses data-date-* options set on the input dom element the component is attached to and returns an object with them isInFixed() - Checks if the dom element or its parents has a fixed position css rule. parseInputDate(date) - Parses a date parameter with moment using the component's options.format and options.useStrict . It returns a moment object or false if parsedMoment#isValid() returns false . Use this to parse date inputs from outside the component (public API calls). init() - Initializes the component. Called when the component instance is created","title":"Dev Guide"},{"location":"ContributorsGuide/#introduction","text":"This component consists actually of 2 subcomponent UI widgets one for the date and one for the time selection process. The developers can configure which of those are needed and also the granularity that the component will allow the users to select a date/time. Developers also choose the format that the selected date/time will be displayed in the input field. The component uses on jQuery , moment.js libraries.","title":"Introduction"},{"location":"ContributorsGuide/#code","text":"","title":"Code"},{"location":"ContributorsGuide/#private-variables","text":"element - Holds the DOM element this instance is attached to options - Holds an object with the currently set options for the specific instance of the component. Don't directly change the properties of that object use the public API methods instead. DO NOT expose this object or its properties outside of the component. date - Holds the moment object for the model value of the component. DON'T directly change this variable unless you REALLY know what you are doing. Use setValue() function to set it. It handles all component logic for updating the model value and emitting all the appropriate events viewDate - Holds the currently selected value that the user has selected through the widget. This is not the model value this is the view value. Changing this usually requires a subsequent call to update() function unset - A boolean variable that holds whether the components model value is set or not. Model's value starts as unset = true and if is either set by the user or programmatically through the api to a valid value then it is set to false . If subsequent events lead to an invalid value then this variable is set to true again. Setting this variable usually takes place in the setValue() function. input - Hold the DOM input element this instance is attached to component - Holds a reference to the .input-group DOM element that the widget is attached or false if it is attached directly on an input field widget - Holds a reference to the DOM element containing the widget or false if the widget is hidden use24hours - Holds whether the component uses 24 hours format or not. This is initialized on the format() function minViewModeNumber - Holds the Numeric equivalent of the options.minViewMode parameter format - Holds the current format string that is used for formatting the date model value. Note this is not the same thing as the options.format as the second could be set to false in which case the first takes the locale's L or LT value currentViewMode - Hold the state of the current viewMode for the DatePicker subcomponent datePickerModes - An array of objects with configuration parameters for the different views of the DatePicker subcomponent viewModes - An array of strings containing all the possible strings that options.viewMode can take through viewMode() public api function directionModes - An array of strings containing all the possible strings that options.direction can take through direction() public api function orientationModes - An array of strings containing all the possible strings that options.orientation can take through orientation() public api function","title":"Private variables"},{"location":"ContributorsGuide/#private-functions","text":"","title":"Private functions"},{"location":"ContributorsGuide/#events-related","text":"notifyEvent(e) - Use this function when you want to send en event to listener this could be used as a filter later stopEvent(e) - Shortcut for stopping propagation of events keydown(e) - Function to trap change(e) - Listener function to track change events occurring on the input dom element the component is attached to attachDatePickerElementEvents() - Attaches listeners to the existing DOM elements the component is attached to. Called upon construction of each datetimepicker instance detachDatePickerElementEvents() - Detaches listeners from the DOM element the component is attached to. Called on destroy() attachDatePickerWidgetEvents() - Attaches listeners on the components widget. Called on show() detachDatePickerWidgetEvents() - Detaches listeners on the components widget. Called on hide()","title":"Events related"},{"location":"ContributorsGuide/#model-related","text":"setValue(targetMoment) - Sets the model value of the component takes a moment object. An error event will be emmited if the targetMoment does not pass the configured validations. Otherwise the date variable will be set and the relevant events will be fired. isValid(targetMoment, granularity) - returns true if the targetMoment moment object is valid according to the components set validation rules ( min/maxDates , disabled/enabledDates and daysOfWeekDisabled ). You may pass a second variable to check only up the the specific granularity year, month, day, hour, minute, second","title":"Model related"},{"location":"ContributorsGuide/#utilities","text":"indexGivenDates (givenDatesArray) - Function that takes the array from enabledDates() and disabledDates() public functions and stores them as object keys to enable quick lookup isInEnableDates(date) - Checks whether if the given moment object exists in the options.enabledDates object isInDisableDates(date) - Checks whether if the given moment object exists in the options.disabledDates array dataToOptions() - Parses data-date-* options set on the input dom element the component is attached to and returns an object with them isInFixed() - Checks if the dom element or its parents has a fixed position css rule. parseInputDate(date) - Parses a date parameter with moment using the component's options.format and options.useStrict . It returns a moment object or false if parsedMoment#isValid() returns false . Use this to parse date inputs from outside the component (public API calls). init() - Initializes the component. Called when the component instance is created","title":"Utilities"},{"location":"Events/","text":"hide.datetimepicker Fired when the widget is hidden. Parameters: e = { date //the currently set date. Type: moment object (clone) } Emitted from: toggle() hide() disable() show.datetimepicker Fired when the widget is shown. Parameters: No parameters are include, listen to change.datetimepicker instead Emitted from: toggle() show() change.datetimepicker Fired when the date is changed, including when changed to a non-date (e.g. When keepInvalid=true). Parameters: e = { date, //date the picker changed to. Type: moment object (clone) oldDate //previous date. Type: moment object (clone) or false in the event of a null } Emitted from: toggle() Note : Only fired when using useCurrent show() Note : Only fired when using useCurrent or when or the date is changed to comply with date rules (min/max etc) date(newDate) minDate(minDate) maxDate(maxDate) daysOfWeekDisabled() error.datetimepicker Fired when a selected date fails to pass validation. Parameters: e = { date //the invalid date. Type: moment object (clone) oldDate //previous date. Type: moment object (clone) or false in the event of a null } Emmited from: minDate(minDate) maxDate(maxDate) daysOfWeekDisabled() setValue() private function update.datetimepicker Fired (in most cases) when the viewDate changes. E.g. Next and Previous buttons, selecting a year. Parameters: e = { change, //Change type as a momentjs format token. Type: string e.g. yyyy on year change viewDate //new viewDate. Type: moment object }","title":"Events"},{"location":"Events/#hidedatetimepicker","text":"Fired when the widget is hidden. Parameters: e = { date //the currently set date. Type: moment object (clone) } Emitted from: toggle() hide() disable()","title":"hide.datetimepicker"},{"location":"Events/#showdatetimepicker","text":"Fired when the widget is shown. Parameters: No parameters are include, listen to change.datetimepicker instead Emitted from: toggle() show()","title":"show.datetimepicker"},{"location":"Events/#changedatetimepicker","text":"Fired when the date is changed, including when changed to a non-date (e.g. When keepInvalid=true). Parameters: e = { date, //date the picker changed to. Type: moment object (clone) oldDate //previous date. Type: moment object (clone) or false in the event of a null } Emitted from: toggle() Note : Only fired when using useCurrent show() Note : Only fired when using useCurrent or when or the date is changed to comply with date rules (min/max etc) date(newDate) minDate(minDate) maxDate(maxDate) daysOfWeekDisabled()","title":"change.datetimepicker"},{"location":"Events/#errordatetimepicker","text":"Fired when a selected date fails to pass validation. Parameters: e = { date //the invalid date. Type: moment object (clone) oldDate //previous date. Type: moment object (clone) or false in the event of a null } Emmited from: minDate(minDate) maxDate(maxDate) daysOfWeekDisabled() setValue() private function","title":"error.datetimepicker"},{"location":"Events/#updatedatetimepicker","text":"Fired (in most cases) when the viewDate changes. E.g. Next and Previous buttons, selecting a year. Parameters: e = { change, //Change type as a momentjs format token. Type: string e.g. yyyy on year change viewDate //new viewDate. Type: moment object }","title":"update.datetimepicker"},{"location":"Extras/","text":"Guides for making the picker work better with rails, IE, etc. Note: I have no idea if these guides still apply for v5 or not. Rails 3 by dhulihan You can easily override the default rails form helpers ( date_select and datetime_select ) with bootstrap-datetimepicker for a much nicer experience. # Add to config/initializers/form.rb or the end of app/helpers/application_helper.rb module ActionView module Helpers class FormBuilder def date_select(method, options = {}, html_options = {}) existing_date = @object.send(method) formatted_date = existing_date.to_date.strftime(\"%F\") if existing_date.present? @template.content_tag(:div, :class => \"input-group\") do text_field(method, :value => formatted_date, :class => \"form-control datepicker\", :\"data-date-format\" => \"YYYY-MM-DD\") + @template.content_tag(:span, @template.content_tag(:span, \"\", :class => \"glyphicon glyphicon-calendar\") ,:class => \"input-group-addon\") end end def datetime_select(method, options = {}, html_options = {}) existing_time = @object.send(method) formatted_time = existing_time.to_time.strftime(\"%F %I:%M %p\") if existing_time.present? @template.content_tag(:div, :class => \"input-group\") do text_field(method, :value => formatted_time, :class => \"form-control datetimepicker\", :\"data-date-format\" => \"YYYY-MM-DD hh:mm A\") + @template.content_tag(:span, @template.content_tag(:span, \"\", :class => \"glyphicon glyphicon-calendar\") ,:class => \"input-group-addon\") end end end end end The time format used here is ActiveRecord-friendly, which means it will be parsed correctly when passed in through params to your record. That's all there is to it! Now all of your forms that use datetime_select or date_select will be automatically updated: <% form_for @post do |f| %> <div class=\"form-group\"> <label>Published At</label> <%= f.datetime_select :published_at %> </div> <% end %>","title":"Extras"},{"location":"Extras/#rails-3","text":"by dhulihan You can easily override the default rails form helpers ( date_select and datetime_select ) with bootstrap-datetimepicker for a much nicer experience. # Add to config/initializers/form.rb or the end of app/helpers/application_helper.rb module ActionView module Helpers class FormBuilder def date_select(method, options = {}, html_options = {}) existing_date = @object.send(method) formatted_date = existing_date.to_date.strftime(\"%F\") if existing_date.present? @template.content_tag(:div, :class => \"input-group\") do text_field(method, :value => formatted_date, :class => \"form-control datepicker\", :\"data-date-format\" => \"YYYY-MM-DD\") + @template.content_tag(:span, @template.content_tag(:span, \"\", :class => \"glyphicon glyphicon-calendar\") ,:class => \"input-group-addon\") end end def datetime_select(method, options = {}, html_options = {}) existing_time = @object.send(method) formatted_time = existing_time.to_time.strftime(\"%F %I:%M %p\") if existing_time.present? @template.content_tag(:div, :class => \"input-group\") do text_field(method, :value => formatted_time, :class => \"form-control datetimepicker\", :\"data-date-format\" => \"YYYY-MM-DD hh:mm A\") + @template.content_tag(:span, @template.content_tag(:span, \"\", :class => \"glyphicon glyphicon-calendar\") ,:class => \"input-group-addon\") end end end end end The time format used here is ActiveRecord-friendly, which means it will be parsed correctly when passed in through params to your record. That's all there is to it! Now all of your forms that use datetime_select or date_select will be automatically updated: <% form_for @post do |f| %> <div class=\"form-group\"> <label>Published At</label> <%= f.datetime_select :published_at %> </div> <% end %>","title":"Rails 3"},{"location":"FAQ/","text":"How do I disable the date or time element How do I format ...; How do I add seconds; etc. The picker uses the format option to decide what components to show. Set format to LT , LTS or another valid MomentJs format string to display certain components How do I change the language/locale The picker uses MomentJs to determine the language string. You can use moment-with-locales or you can include whatever local file you need. Set the picker's locale option to de or whatever the locale string is. How do I change the styles? The picker closes. Set debug:true which will force the picker to stay open, even onBlur . You can hide the picker manually by calling hide() How do I change the start of the week? Start of the week is based on the locale provided . This is defined by moment's locales. If you want to change it, create your own locale file or override. See moment's docs . How I use the picker as birthday picker? Use the viewMode option to 'years'","title":"FAQs"},{"location":"FAQ/#how-do-i-disable-the-date-or-time-element","text":"How do I format ...; How do I add seconds; etc. The picker uses the format option to decide what components to show. Set format to LT , LTS or another valid MomentJs format string to display certain components","title":"How do I disable the date or time element"},{"location":"FAQ/#how-do-i-change-the-languagelocale","text":"The picker uses MomentJs to determine the language string. You can use moment-with-locales or you can include whatever local file you need. Set the picker's locale option to de or whatever the locale string is.","title":"How do I change the language/locale"},{"location":"FAQ/#how-do-i-change-the-styles-the-picker-closes","text":"Set debug:true which will force the picker to stay open, even onBlur . You can hide the picker manually by calling hide()","title":"How do I change the styles? The picker closes."},{"location":"FAQ/#how-do-i-change-the-start-of-the-week","text":"Start of the week is based on the locale provided . This is defined by moment's locales. If you want to change it, create your own locale file or override. See moment's docs .","title":"How do I change the start of the week?"},{"location":"FAQ/#how-i-use-the-picker-as-birthday-picker","text":"Use the viewMode option to 'years'","title":"How I use the picker as birthday picker?"},{"location":"Functions/","text":"Note All functions are accessed via the data attribute e.g. $('#datetimepicker').datetimepicker(FUNCTION) destroy Destroys the widget and removes all attached event listeners toggle Shows or hides the widget Emits hide.datetimepicker - if the widget is hidden after the toggle call show.datetimepicker - if the widget is show after the toggle call change.datetimepicker - if the widget is opened for the first time and the input element is empty and options.useCurrent != false show Shows the widget Emits show.datetimepicker - if the widget was hidden before that call change.datetimepicker - if the widget is opened for the first time and the useCurrent is set to true or to a granularity value and the input element the component is attached to has an empty value hide Hides the widget Emits hide.datetimepicker - if the widget was visible before that call disable Disables the input element, the component is attached to, by adding a disabled=\"true\" attribute to it. If the widget was visible before that call it is hidden. Emits hide.datetimepicker - if the widget was visible before that call enable Enables the input element, the component is attached to, by removing disabled attribute from it. clear Clears the date picker by setting the value to null viewDate viewDate Returns a moment variable with the currently set options.viewDate option. viewDate(viewDate) Takes a string, moment or Date value. This will change the viewDate without changing or setting the selected date.","title":"Functions"},{"location":"Functions/#destroy","text":"Destroys the widget and removes all attached event listeners","title":"destroy"},{"location":"Functions/#toggle","text":"Shows or hides the widget","title":"toggle"},{"location":"Functions/#emits","text":"hide.datetimepicker - if the widget is hidden after the toggle call show.datetimepicker - if the widget is show after the toggle call change.datetimepicker - if the widget is opened for the first time and the input element is empty and options.useCurrent != false","title":"Emits"},{"location":"Functions/#show","text":"Shows the widget","title":"show"},{"location":"Functions/#emits_1","text":"show.datetimepicker - if the widget was hidden before that call change.datetimepicker - if the widget is opened for the first time and the useCurrent is set to true or to a granularity value and the input element the component is attached to has an empty value","title":"Emits"},{"location":"Functions/#hide","text":"Hides the widget","title":"hide"},{"location":"Functions/#emits_2","text":"hide.datetimepicker - if the widget was visible before that call","title":"Emits"},{"location":"Functions/#disable","text":"Disables the input element, the component is attached to, by adding a disabled=\"true\" attribute to it. If the widget was visible before that call it is hidden.","title":"disable"},{"location":"Functions/#emits_3","text":"hide.datetimepicker - if the widget was visible before that call","title":"Emits"},{"location":"Functions/#enable","text":"Enables the input element, the component is attached to, by removing disabled attribute from it.","title":"enable"},{"location":"Functions/#clear","text":"Clears the date picker by setting the value to null","title":"clear"},{"location":"Functions/#viewdate","text":"","title":"viewDate"},{"location":"Functions/#viewdate_1","text":"Returns a moment variable with the currently set options.viewDate option.","title":"viewDate"},{"location":"Functions/#viewdateviewdate","text":"Takes a string, moment or Date value. This will change the viewDate without changing or setting the selected date.","title":"viewDate(viewDate)"},{"location":"Installing/","text":"Minimal Requirements jQuery Moment.js Locales: Moment's locale files are here Installation Guides CDN Rails Django Angular Manual CDN <head> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/js/tempusdominus-bootstrap-4.min.js\" crossorigin=\"anonymous\"></script> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/css/tempusdominus-bootstrap-4.min.css\" crossorigin=\"anonymous\" /> </head> Package Managers Rails Rails 5.1 Support - Bootstrap 4 Datetime Picker Rails Add gem 'bootstrap4-datetime-picker-rails' to your Gemfile Execute bundle Add //= require tempusdominus-bootstrap-4.js to your application.js Add @import \"tempusdominus-bootstrap-4.css\" to your application.scss Django Python package for Django: Django Tempus Dominus Install via pip: pip install django-tempus-dominus Widgets are provided for Date, DateTime, and Time. Full examples are available with Django Forms, Widgets, and Templates . Angular Wrapper Follow instructions at ngx-tempusdominus-bootstrap Manual Acquire jQuery Acquire Moment.js Acquire <script type=\"text/javascript\" src=\"/path/to/jquery.js\"></script> <script type=\"text/javascript\" src=\"/path/to/moment.js\"></script> <script type=\"text/javascript\" src=\"/path/to/tempusdominus-bootstrap-4.min.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/tempusdominus-bootstrap-4.min.css\"/>","title":"Installing"},{"location":"Installing/#minimal-requirements","text":"jQuery Moment.js Locales: Moment's locale files are here","title":"Minimal Requirements"},{"location":"Installing/#installation-guides","text":"CDN Rails Django Angular Manual","title":"Installation Guides"},{"location":"Installing/#cdn","text":"<head> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/js/tempusdominus-bootstrap-4.min.js\" crossorigin=\"anonymous\"></script> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.38.0/css/tempusdominus-bootstrap-4.min.css\" crossorigin=\"anonymous\" /> </head>","title":"CDN"},{"location":"Installing/#package-managers","text":"","title":"Package Managers"},{"location":"Installing/#rails","text":"Rails 5.1 Support - Bootstrap 4 Datetime Picker Rails Add gem 'bootstrap4-datetime-picker-rails' to your Gemfile Execute bundle Add //= require tempusdominus-bootstrap-4.js to your application.js Add @import \"tempusdominus-bootstrap-4.css\" to your application.scss","title":"Rails"},{"location":"Installing/#django","text":"Python package for Django: Django Tempus Dominus Install via pip: pip install django-tempus-dominus Widgets are provided for Date, DateTime, and Time. Full examples are available with Django Forms, Widgets, and Templates .","title":"Django"},{"location":"Installing/#angular-wrapper","text":"Follow instructions at ngx-tempusdominus-bootstrap","title":"Angular Wrapper"},{"location":"Installing/#manual","text":"Acquire jQuery Acquire Moment.js Acquire <script type=\"text/javascript\" src=\"/path/to/jquery.js\"></script> <script type=\"text/javascript\" src=\"/path/to/moment.js\"></script> <script type=\"text/javascript\" src=\"/path/to/tempusdominus-bootstrap-4.min.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/tempusdominus-bootstrap-4.min.css\"/>","title":"Manual"},{"location":"Options/","text":"Note Initialize options as $('#datetimepicker').datetimepicker({ sideBySide: true, debug: true }) Note To set options use $('#datetimepicker').datetimepicker('sideBySide', true) Note To get option value use $('#datetimepicker').datetimepicker('sideBySide') Global defaults can be get/set by $.fn.datetimepicker.Constructor.Default e.g. To set icons to use Font Awesome 5 $.fn.datetimepicker.Constructor.Default = $.extend({}, $.fn.datetimepicker.Constructor.Default, { icons: { time: 'far fa-clock', date: 'far fa-calendar', up: 'far fa-arrow-up', down: 'far fa-arrow-down', previous: 'far fa-chevron-left', next: 'far fa-chevron-right', today: 'far fa-calendar-check-o', clear: 'far fa-trash', close: 'far fa-times' } }); Do this before you init pickers. options Returns the components current options object. Note that the changing the values of the returned object does not change the components actual configuration. Use options(options) to set the components options massively or the other methods for setting config options individually. options, [options] Takes an object variable with option key:value properties and configures the component. Use this to update multiple options on the component. date Returns the component's model current date, a moment object or null if not set. date, [newDate] Takes string, Date, moment, null parameter and sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration. Throws TypeError - in case the newDate cannot be parsed Emits change.datetimepicker - In case newDate is different from current moment format Default: false See momentjs' docs for valid formats. Format also dictates what components are shown, e.g. MM/dd/YYYY will not display the time picker. format Returns the component's options.format string format, [format] Takes a moment.js format string and sets the components options.format . This is used for displaying and also for parsing input strings either from the input element the component is attached to or the date() function. The parameter can also be a boolean:false in which case the format is set to the locale's L LT . Note: this is also used to determine if the time picker sub component will display the hours in 12 or 24 format. (if a or h exists in the passed string then a 12 hour mode is set) dayViewHeaderFormat Default: 'MMMM YYYY' Changes the heading of the date picker when in \"days\" view. dayViewHeaderFormat Returns a string variable with the currently set options.dayViewHeaderFormat option. dayViewHeaderFormat, [string] Takes a string value. Used to customize the header of the day view. extraFormats Default: false Allows for several input formats to be valid. See this PR . extraFormats Returns a boolean or array with the options.extraFormats option configuration extraFormats, [formats] Takes an array of valid input moment format options. stepping Default: 1 Number of minutes the up/down arrow's will move the minutes value in the time picker stepping Returns a number with the options.stepping option configuration stepping, [number] Takes a number . This be the amount the up/down arrows move the minute value with a time picker. min/maxDate Default: false Accepts: date, moment, string Prevents date/time selections before this date. Will override defaultDate and useCurrent if either of these settings are the same day since both options are invalid according to the rules you've selected. minDate Returns the currently set moment of the options.minDate or false if not set minDate, [minDate] Takes a minDate string, Date, moment, boolean:false parameter and disallows the user to select a moment that is before that moment. If a boolean:false value is passed the options.minDate parameter is cleared and there is no restriction to the minimum moment the user can select. Note: If the minDate parameter is after the currently selected moment the currently selected moment changes to minDate parameter Throws TypeError - if minDate parameter cannot be parsed using the options.format and options.useStrict configuration settings TypeError - if minDate parameter is after options.maxDate Emits change.datetimepicker - if the new minDate is after currently selected moment (waiting for #472 to close in order to finalize this part) dp.error - if the new minDate is after currently selected moment (waiting for #472 to close in order to finalize this part) maxDate Returns the currently set moment of the options.maxDate or false if not set maxDate, [maxDate] Takes a [maxDate] string, Date, moment, boolean:false parameter and disallows the user to select a moment that is after that moment. If a boolean:false value is passed options.maxDate is cleared and there is no restriction to the maximum moment the user can select. Note: If [maxDate] is before the currently selected moment the currently selected moment changes to [maxDate] Throws TypeError - if maxDate parameter cannot be parsed using the options.format and options.useStrict configuration settings TypeError - if maxDate parameter is before options.minDate Emits change.datetimepicker - if the new maxDate is after currently selected moment (waiting for #472 to close in order to finalize this part) dp.error - if the new maxDate is after currently selected moment (waiting for #472 to close in order to finalize this part) useCurrent Default: true On show , will set the picker to the current date/time. useCurrent Returns a boolean or string with the options.useCurrent option configuration useCurrent, boolean or string Takes a boolean or string . If a boolean true is passed and the components model moment is not set (either through setDate or through a valid value on the input element the component is attached to) then the first time the user opens the datetimepicker widget the value is initialized to the current moment of the action. If a false boolean is passed then no initialization happens on the input element. You can select the granularity on the initialized moment by passing one of the following strings ( 'year', 'month', 'day', 'hour', 'minute' ) in the variable. If for example you pass 'day' to the setUseCurrent function and the input field is empty the first time the user opens the datetimepicker widget the input text will be initialized to the current date time with day granularity (e.g. if current time = 2014-08-10 13:32:33 the input value will be initialized to 2014-08-10 00:00:00 ) Note: If the options.defaultDate is set or the input element the component is attached to has already a value that takes precedence and the functionality of useCurrent is not triggered! collapse Default: true Using a Bootstraps collapse to switch between date/time pickers. collapse Returns a boolean of the options.sideBySide . collapse, [collapse] Takes a boolean . If set to false the picker will display similar to sideBySide except vertical. locale Default: moment.locale() Accepts: string, moment.local('locale') See momentjs for valid locales. You must include moment-with-locales.js or a local js file. locale Returns the currently set locale of the options.locale locale, [newLocale] Takes a string of any valid moment locale e.g. de for German. Throws TypeError - if the locale is not loaded via a separate script or moment-with-locales defaultDate Default: false Accepts: date, moment, string Sets the picker default date/time. Overrides useCurrent defaultDate Returns a moment with the options.defaultDate option configuration or false if not set defaultDate, [defaultDate] Takes a string, Date, moment, boolean:false . Will set the picker's initial date. If a boolean:false value is passed the options.defaultDate parameter is cleared. TypeError - if the provided date pass validation, including disabledDates , enabledDates , minDate , maxDate , and daysOfWeekDisabled TypeError - if the provided date cannot be parsed by moment.js en/disabledDates Default: false Accepts: array of [date, moment, string] disabledDates Returns an array with the currently set disabled dates on the component. disabledDates, [dates] Takes an [ string or Date or moment ] of values and disallows the user to select those days. Setting this takes precedence over options.minDate , options.maxDate configuration. Also calling this function removes the configuration of options.enabledDates if such exist. Note: These values are matched with Day granularity. enabledDates Returns an array with the currently set enabled dates on the component. enabledDates, [dates] Takes an [ string or Date or moment ] of values and allows the user to select only from those days. Setting this takes precedence over options.minDate , options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist. Note: These values are matched with Day granularity. icons Default: { time: 'fa fa-clock-o', date: 'fa fa-calendar', up: 'fa fa-arrow-up', down: 'fa fa-arrow-down', previous: 'fa fa-chevron-left', next: 'fa fa-chevron-right', today: 'fa fa-calendar-check-o', clear: 'fa fa-delete', close: 'fa fa-times' } Accepts: object with all or some of the parameters above Change the default icons for the pickers functions. icons Returns an Ojbect of options.icons icons, [icons] Takes an Ojbect of strings . Throws TypeError - if icons parameter is not an Ojbect useStrict Default: false Defines if moment should use strict date parsing when considering a date to be valid. useStrict Returns a boolean of the options.useStrict useStrict, [useStrict] Takes a boolean . If useStrict is true , moment.js parsing rules will be stricter when determining if a date is valid or not. sideBySide Default: false Shows the picker side by side when using the time and date together. sideBySide Returns a boolean of the options.sideBySide . sideBySide, [sideBySide] Takes a boolean . If sideBySide is true and the time picker is used, both components will display side by side instead of collapsing. daysOfWeekDisabled Default: [] Accepts: array of numbers from 0-6 Disables the section of days of the week, e.g. weekends. daysOfWeekDisabled Returns an array with the options.daysOfWeekDisabled configuration setting of the component. daysOfWeekDisabled, [daysOfWeek] Takes an [ Number : 0 to 6 ] and disallow the user to select weekdays that exist in this array. This has lower priority over the options.minDate , options.maxDate , options.disabledDates and options.enabledDates configuration settings. Emits change.datetimepicker - if the currently selected moment falls in the values passed on the daysOfWeek parameter. (waiting for #472 to close in order to finalize this part) dp.error - if the currently selected moment falls in the values passed on the daysOfWeek parameter. (waiting for #472 to close in order to finalize this part) calendarWeeks Default: false Shows the week of the year to the left of first day of the week. calendarWeeks Returns a boolean with the current options.calendarWeeks option configuration calendarWeeks, [boolean] Takes a boolean variable to set if the week numbers will appear to the left on the days view viewMode Default: 'days' Accepts: 'decades','years','months','days', 'times' The default view to display when the picker is shown. Note : To limit the picker to selecting, for instance the year and month, use format: MM/YYYY . viewMode Returns a string of the options.viewMode . viewMode, [newViewMode] Takes a string . Valid values are 'days' , 'months' , 'years' and 'decades' Throws TypeError - if newViewMode parameter is not an a string or if newViewMode is not a valid value. toolbarPlacement Default: 'default' Accepts: 'default', 'top', 'bottom' Changes the placement of the icon toolbar. toolbarplacement Returns a string variable with the currently set options.toolbarplacement option. toolbarplacement, [string] Takes a string value. Valid values are 'default' , 'top' and 'bottom' . Changes the placement of the toolbar where the today, clear, component switch icon are located. buttons Default: { showToday: false, showClear: false, showClose: false } Accepts: object with all or some of the parameters above Change the default toolbar buttons for the pickers functions. buttons Returns an Ojbect of options.buttons buttons, [buttons] Takes an Ojbect of boolean . Throws TypeError - if buttons parameter is not an Ojbect widgetPositioning Default: { horizontal: 'auto' vertical: 'auto' } Accepts: object with the all or one of the parameters above horizontal: 'auto', 'left', 'right' vertical: 'auto', 'top', 'bottom' widgetPositioning Returns the currently set options.widgetPositioning object containing two keys horizontal and vertical widgetPositioning, [positioningObject] Takes an object parameter that can contain two keys vertical and horizontal each having a value of 'auto', 'top', 'bottom' for vertical and 'auto', 'left', 'right' for horizontal which defines where the dropdown with the widget will appear relative to the input element the component is attached to. 'auto' is the default value for both horizontal and vertical keys and it tries to automatically place the dropdown in a position that is visible to the user. Usually you should not override those options unless you have a special need in your layout. widgetParent Default: null Accepts: string or jQuery object On picker show, places the widget at the identifier (string) or jQuery object if the element has css position: 'relative' widgetParent Returns a $(element) variable with the currently set options.widgetParent option. widgetParent, [widgetParent] Takes a string or $(element) value. keepOpen Default: false Will cause the date picker to stay open after selecting a date. keepOpen Returns a boolean variable with the currently set options.keepOpen option. keepOpen, [boolean] Takes a boolean value. inline Default: false Will display the picker inline without the need of a input field. This will also hide borders and shadows. inline Returns a boolean variable with the currently set options.inline option. inline, [boolean] Takes a boolean value. keepInvalid 4.7.14 Default: false Will cause the date picker to not revert or overwrite invalid dates. keepInvalid Returns a string variable with the currently set options.keepInvalid option. keepInvalid, [boolean] Takes a boolean value. If true , invalid dates will not be reverted to a previous selection or changed. keyBinds Default: up: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(7, 'd')); } else { this.date(this.date().clone().add(1, 'm')); } }, down: function (widget) { if (!widget) { this.show(); } else if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(7, 'd')); } else { this.date(this.date().clone().subtract(1, 'm')); } }, 'control up': function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'y')); } else { this.date(this.date().clone().add(1, 'h')); } }, 'control down': function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'y')); } else { this.date(this.date().clone().subtract(1, 'h')); } }, left: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'd')); } }, right: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'd')); } }, pageUp: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'M')); } }, pageDown: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'M')); } }, enter: function () { this.hide(); }, escape: function () { this.hide(); }, 'control space': function (widget) { if (widget.find('.timepicker').is(':visible')) { widget.find('.btn[data-action=\"togglePeriod\"]').click(); } }, t: function () { this.date(moment()); }, 'delete': function () { this.clear(); } Allows for custom events to fire on keyboard press. keyBinds Returns a string variable with the currently set options.keyBinds option. keyBinds, [object] Takes an object value. Allows for several keyBinding functions to be specified for ease of access or accessibility. See the options page for defaults. debug Default: false Will cause the date picker to stay open after a blur event. ignoreReadonly Default: false Allow date picker show event to fire even when the associated input element has the readonly=\"readonly\" property. ignoreReadonly Returns a boolean variable with the currently set options.ignoreReadonly option. ignoreReadonly, [boolean] Takes a boolean value. Set this to true to allow the picker to be used even if the input field is readonly . This will not bypass the disabled property disabledTimeIntervals Default: false Disables time selection between the given moments . disabledTimeIntervals Returns an array variable with the currently set options.disabledTimeIntervals option. disabledTimeIntervals, [array] Takes a array value. The array must be in the following format [moment(),moment()] For example: disabledTimeIntervals: [[moment({ h: 0 }), moment({ h: 8 })], [moment({ h: 18 }), moment({ h: 24 })]] Will disable times between 12-8am and 6-12pm today allowInputToggle Default: false If true , the picker will show on textbox focus and icon click when used in a button group. allowInputToggle Returns a boolean variable with the currently set options.allowInputToggle option. allowInputToggle, [boolean] Takes a boolean value. If true , the picker will show on textbox focus and icon click when used in a button group focusOnShow Default: true If false , the textbox will not be given focus when the picker is shown. focusOnShow Returns a boolean variable with the currently set options.focusOnShow option. focusOnShow, [boolean] Takes a boolean value. If false , the textbox will not be given focus when the picker is shown en/disabledHours Default: false disabledHours Returns an array variable with the currently set options.en/disabledHours option. disabledHours, boolean Takes a array value. Must be in 24 hour format. Will allow or disallow hour selections (much like disabledTimeIntervals ) but will affect all days. Like en/disabledDates , these options are mutually exclusive and will reset one of the options back to false. disabledHours: [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 19, 20, 21, 22, 23, 24] enabledHours: [9, 10, 11, 12, 13, 14, 15, 16] viewDate Default: false This will change the viewDate without changing or setting the selected date. parseInputDate parseInputDate Returns a function with the currently set options.parseInputDate parseInputDate, [function] Takes a function Allows custom input formatting For example: the user can enter 'yesterday' or '30 days ago. Example: var parseRelativeDate = function(relativeDate) { switch (relativeDate) { case 'today': return moment() case 'yesterday': return moment().subtract(1, 'day'); default: return moment() .subtract(Number(relativeDate.replace(\"days ago\", \"\").trim()), 'days'); } } var parseInputDate = function(inputDate) { var relativeDatePattern = /today|yesterday|[0-9]+\\s+(days ago)/, resultDate; if (moment.isMoment(inputDate) || inputDate instanceof Date) { resultDate = moment(inputDate); } else { var relativeDate = inputDate.match(relativeDatePattern), parseDate = null; if (relativeDate !== null) parseDate = this.parseRelativeDate(inputDate.match(relativeDatePattern)[0]); else parseDate = moment(); resultDate = moment(parseDate, \"YYYY-MM-DD\"); } return resultDate; } tooltips tooltips: { today: 'Go to today', clear: 'Clear selection', close: 'Close the picker', selectMonth: 'Select Month', prevMonth: 'Previous Month', nextMonth: 'Next Month', selectYear: 'Select Year', prevYear: 'Previous Year', nextYear: 'Next Year', selectDecade: 'Select Decade', prevDecade: 'Previous Decade', nextDecade: 'Next Decade', prevCentury: 'Previous Century', nextCentury: 'Next Century',, incrementHour: 'Increment Hour', pickHour: 'Pick Hour', decrementHour:'Decrement Hour', incrementMinute: 'Increment Minute', pickMinute: 'Pick Minute', decrementMinute:'Decrement Minute', incrementSecond: 'Increment Second', pickSecond: 'Pick Second', decrementSecond:'Decrement Second' } This will change the tooltips over each icon to a custom string. tooltips Returns an Ojbect of options.tooltips tooltips, [tooltips] Takes an Ojbect of strings . Throws TypeError - if tooltips parameter is not an Ojbect timeZone timeZone: '' Allows the setting of the Time Zone. You must include moment-timezone.js and moment-timzone data. See moment timezone documentation for usage. timeZone Returns an string of options.timeZone timeZone, [timeZone] Takes an string of a valid timezone. Throws TypeError - if tooltips parameter is not an string allowMultidate allowMultidate: false Allows the setting of multiple dates. allowMultidate Returns an boolean of options.allowMultidate allowMultidate, [allowMultidate] Takes an boolean . Throws TypeError - if allowMultidate parameter is not an boolean multidateSeparator multidateSeparator: ',' Used with allowMultidate . E.g. 1/1/2017,1/2/2017 multidateSeparator Returns an string of options.multidateSeparator multidateSeparator, [multidateSeparator] Takes an string of a valid timezone. Throws TypeError - if multidateSeparator parameter is not an string TypeError - if multidateSeparator parameter is longer then 1 character","title":"Options"},{"location":"Options/#options","text":"Returns the components current options object. Note that the changing the values of the returned object does not change the components actual configuration. Use options(options) to set the components options massively or the other methods for setting config options individually.","title":"options"},{"location":"Options/#options-options","text":"Takes an object variable with option key:value properties and configures the component. Use this to update multiple options on the component.","title":"options, [options]"},{"location":"Options/#date","text":"Returns the component's model current date, a moment object or null if not set.","title":"date"},{"location":"Options/#date-newdate","text":"Takes string, Date, moment, null parameter and sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.","title":"date, [newDate]"},{"location":"Options/#throws","text":"TypeError - in case the newDate cannot be parsed","title":"Throws"},{"location":"Options/#emits","text":"change.datetimepicker - In case newDate is different from current moment","title":"Emits"},{"location":"Options/#format","text":"Default: false See momentjs' docs for valid formats. Format also dictates what components are shown, e.g. MM/dd/YYYY will not display the time picker.","title":"format"},{"location":"Options/#format_1","text":"Returns the component's options.format string","title":"format"},{"location":"Options/#format-format","text":"Takes a moment.js format string and sets the components options.format . This is used for displaying and also for parsing input strings either from the input element the component is attached to or the date() function. The parameter can also be a boolean:false in which case the format is set to the locale's L LT . Note: this is also used to determine if the time picker sub component will display the hours in 12 or 24 format. (if a or h exists in the passed string then a 12 hour mode is set)","title":"format, [format]"},{"location":"Options/#dayviewheaderformat","text":"Default: 'MMMM YYYY' Changes the heading of the date picker when in \"days\" view.","title":"dayViewHeaderFormat"},{"location":"Options/#dayviewheaderformat_1","text":"Returns a string variable with the currently set options.dayViewHeaderFormat option.","title":"dayViewHeaderFormat"},{"location":"Options/#dayviewheaderformat-string","text":"Takes a string value. Used to customize the header of the day view.","title":"dayViewHeaderFormat, [string]"},{"location":"Options/#extraformats","text":"Default: false Allows for several input formats to be valid. See this PR .","title":"extraFormats"},{"location":"Options/#extraformats_1","text":"Returns a boolean or array with the options.extraFormats option configuration","title":"extraFormats"},{"location":"Options/#extraformats-formats","text":"Takes an array of valid input moment format options.","title":"extraFormats, [formats]"},{"location":"Options/#stepping","text":"Default: 1 Number of minutes the up/down arrow's will move the minutes value in the time picker","title":"stepping"},{"location":"Options/#stepping_1","text":"Returns a number with the options.stepping option configuration","title":"stepping"},{"location":"Options/#stepping-number","text":"Takes a number . This be the amount the up/down arrows move the minute value with a time picker.","title":"stepping, [number]"},{"location":"Options/#minmaxdate","text":"Default: false Accepts: date, moment, string Prevents date/time selections before this date. Will override defaultDate and useCurrent if either of these settings are the same day since both options are invalid according to the rules you've selected.","title":"min/maxDate"},{"location":"Options/#mindate","text":"Returns the currently set moment of the options.minDate or false if not set","title":"minDate"},{"location":"Options/#mindate-mindate","text":"Takes a minDate string, Date, moment, boolean:false parameter and disallows the user to select a moment that is before that moment. If a boolean:false value is passed the options.minDate parameter is cleared and there is no restriction to the minimum moment the user can select. Note: If the minDate parameter is after the currently selected moment the currently selected moment changes to minDate parameter","title":"minDate, [minDate]"},{"location":"Options/#throws_1","text":"TypeError - if minDate parameter cannot be parsed using the options.format and options.useStrict configuration settings TypeError - if minDate parameter is after options.maxDate","title":"Throws"},{"location":"Options/#emits_1","text":"change.datetimepicker - if the new minDate is after currently selected moment (waiting for #472 to close in order to finalize this part) dp.error - if the new minDate is after currently selected moment (waiting for #472 to close in order to finalize this part)","title":"Emits"},{"location":"Options/#maxdate","text":"Returns the currently set moment of the options.maxDate or false if not set","title":"maxDate"},{"location":"Options/#maxdate-maxdate","text":"Takes a [maxDate] string, Date, moment, boolean:false parameter and disallows the user to select a moment that is after that moment. If a boolean:false value is passed options.maxDate is cleared and there is no restriction to the maximum moment the user can select. Note: If [maxDate] is before the currently selected moment the currently selected moment changes to [maxDate]","title":"maxDate, [maxDate]"},{"location":"Options/#throws_2","text":"TypeError - if maxDate parameter cannot be parsed using the options.format and options.useStrict configuration settings TypeError - if maxDate parameter is before options.minDate","title":"Throws"},{"location":"Options/#emits_2","text":"change.datetimepicker - if the new maxDate is after currently selected moment (waiting for #472 to close in order to finalize this part) dp.error - if the new maxDate is after currently selected moment (waiting for #472 to close in order to finalize this part)","title":"Emits"},{"location":"Options/#usecurrent","text":"Default: true On show , will set the picker to the current date/time.","title":"useCurrent"},{"location":"Options/#usecurrent_1","text":"Returns a boolean or string with the options.useCurrent option configuration","title":"useCurrent"},{"location":"Options/#usecurrent-boolean-or-string","text":"Takes a boolean or string . If a boolean true is passed and the components model moment is not set (either through setDate or through a valid value on the input element the component is attached to) then the first time the user opens the datetimepicker widget the value is initialized to the current moment of the action. If a false boolean is passed then no initialization happens on the input element. You can select the granularity on the initialized moment by passing one of the following strings ( 'year', 'month', 'day', 'hour', 'minute' ) in the variable. If for example you pass 'day' to the setUseCurrent function and the input field is empty the first time the user opens the datetimepicker widget the input text will be initialized to the current date time with day granularity (e.g. if current time = 2014-08-10 13:32:33 the input value will be initialized to 2014-08-10 00:00:00 ) Note: If the options.defaultDate is set or the input element the component is attached to has already a value that takes precedence and the functionality of useCurrent is not triggered!","title":"useCurrent, boolean or string"},{"location":"Options/#collapse","text":"Default: true Using a Bootstraps collapse to switch between date/time pickers.","title":"collapse"},{"location":"Options/#collapse_1","text":"Returns a boolean of the options.sideBySide .","title":"collapse"},{"location":"Options/#collapse-collapse","text":"Takes a boolean . If set to false the picker will display similar to sideBySide except vertical.","title":"collapse, [collapse]"},{"location":"Options/#locale","text":"Default: moment.locale() Accepts: string, moment.local('locale') See momentjs for valid locales. You must include moment-with-locales.js or a local js file.","title":"locale"},{"location":"Options/#locale_1","text":"Returns the currently set locale of the options.locale","title":"locale"},{"location":"Options/#locale-newlocale","text":"Takes a string of any valid moment locale e.g. de for German.","title":"locale, [newLocale]"},{"location":"Options/#throws_3","text":"TypeError - if the locale is not loaded via a separate script or moment-with-locales","title":"Throws"},{"location":"Options/#defaultdate","text":"Default: false Accepts: date, moment, string Sets the picker default date/time. Overrides useCurrent","title":"defaultDate"},{"location":"Options/#defaultdate_1","text":"Returns a moment with the options.defaultDate option configuration or false if not set","title":"defaultDate"},{"location":"Options/#defaultdate-defaultdate","text":"Takes a string, Date, moment, boolean:false . Will set the picker's initial date. If a boolean:false value is passed the options.defaultDate parameter is cleared. TypeError - if the provided date pass validation, including disabledDates , enabledDates , minDate , maxDate , and daysOfWeekDisabled TypeError - if the provided date cannot be parsed by moment.js","title":"defaultDate, [defaultDate]"},{"location":"Options/#endisableddates","text":"Default: false Accepts: array of [date, moment, string]","title":"en/disabledDates"},{"location":"Options/#disableddates","text":"Returns an array with the currently set disabled dates on the component.","title":"disabledDates"},{"location":"Options/#disableddates-dates","text":"Takes an [ string or Date or moment ] of values and disallows the user to select those days. Setting this takes precedence over options.minDate , options.maxDate configuration. Also calling this function removes the configuration of options.enabledDates if such exist. Note: These values are matched with Day granularity.","title":"disabledDates, [dates]"},{"location":"Options/#enableddates","text":"Returns an array with the currently set enabled dates on the component.","title":"enabledDates"},{"location":"Options/#enableddates-dates","text":"Takes an [ string or Date or moment ] of values and allows the user to select only from those days. Setting this takes precedence over options.minDate , options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist. Note: These values are matched with Day granularity.","title":"enabledDates, [dates]"},{"location":"Options/#icons","text":"Default: { time: 'fa fa-clock-o', date: 'fa fa-calendar', up: 'fa fa-arrow-up', down: 'fa fa-arrow-down', previous: 'fa fa-chevron-left', next: 'fa fa-chevron-right', today: 'fa fa-calendar-check-o', clear: 'fa fa-delete', close: 'fa fa-times' } Accepts: object with all or some of the parameters above Change the default icons for the pickers functions.","title":"icons"},{"location":"Options/#icons_1","text":"Returns an Ojbect of options.icons","title":"icons"},{"location":"Options/#icons-icons","text":"Takes an Ojbect of strings .","title":"icons, [icons]"},{"location":"Options/#throws_4","text":"TypeError - if icons parameter is not an Ojbect","title":"Throws"},{"location":"Options/#usestrict","text":"Default: false Defines if moment should use strict date parsing when considering a date to be valid.","title":"useStrict"},{"location":"Options/#usestrict_1","text":"Returns a boolean of the options.useStrict","title":"useStrict"},{"location":"Options/#usestrict-usestrict","text":"Takes a boolean . If useStrict is true , moment.js parsing rules will be stricter when determining if a date is valid or not.","title":"useStrict, [useStrict]"},{"location":"Options/#sidebyside","text":"Default: false Shows the picker side by side when using the time and date together.","title":"sideBySide"},{"location":"Options/#sidebyside_1","text":"Returns a boolean of the options.sideBySide .","title":"sideBySide"},{"location":"Options/#sidebyside-sidebyside","text":"Takes a boolean . If sideBySide is true and the time picker is used, both components will display side by side instead of collapsing.","title":"sideBySide, [sideBySide]"},{"location":"Options/#daysofweekdisabled","text":"Default: [] Accepts: array of numbers from 0-6 Disables the section of days of the week, e.g. weekends.","title":"daysOfWeekDisabled"},{"location":"Options/#daysofweekdisabled_1","text":"Returns an array with the options.daysOfWeekDisabled configuration setting of the component.","title":"daysOfWeekDisabled"},{"location":"Options/#daysofweekdisabled-daysofweek","text":"Takes an [ Number : 0 to 6 ] and disallow the user to select weekdays that exist in this array. This has lower priority over the options.minDate , options.maxDate , options.disabledDates and options.enabledDates configuration settings.","title":"daysOfWeekDisabled, [daysOfWeek]"},{"location":"Options/#emits_3","text":"change.datetimepicker - if the currently selected moment falls in the values passed on the daysOfWeek parameter. (waiting for #472 to close in order to finalize this part) dp.error - if the currently selected moment falls in the values passed on the daysOfWeek parameter. (waiting for #472 to close in order to finalize this part)","title":"Emits"},{"location":"Options/#calendarweeks","text":"Default: false Shows the week of the year to the left of first day of the week.","title":"calendarWeeks"},{"location":"Options/#calendarweeks_1","text":"Returns a boolean with the current options.calendarWeeks option configuration","title":"calendarWeeks"},{"location":"Options/#calendarweeks-boolean","text":"Takes a boolean variable to set if the week numbers will appear to the left on the days view","title":"calendarWeeks, [boolean]"},{"location":"Options/#viewmode","text":"Default: 'days' Accepts: 'decades','years','months','days', 'times' The default view to display when the picker is shown. Note : To limit the picker to selecting, for instance the year and month, use format: MM/YYYY .","title":"viewMode"},{"location":"Options/#viewmode_1","text":"Returns a string of the options.viewMode .","title":"viewMode"},{"location":"Options/#viewmode-newviewmode","text":"Takes a string . Valid values are 'days' , 'months' , 'years' and 'decades'","title":"viewMode, [newViewMode]"},{"location":"Options/#throws_5","text":"TypeError - if newViewMode parameter is not an a string or if newViewMode is not a valid value.","title":"Throws"},{"location":"Options/#toolbarplacement","text":"Default: 'default' Accepts: 'default', 'top', 'bottom' Changes the placement of the icon toolbar.","title":"toolbarPlacement"},{"location":"Options/#toolbarplacement_1","text":"Returns a string variable with the currently set options.toolbarplacement option.","title":"toolbarplacement"},{"location":"Options/#toolbarplacement-string","text":"Takes a string value. Valid values are 'default' , 'top' and 'bottom' . Changes the placement of the toolbar where the today, clear, component switch icon are located.","title":"toolbarplacement, [string]"},{"location":"Options/#buttons","text":"Default: { showToday: false, showClear: false, showClose: false } Accepts: object with all or some of the parameters above Change the default toolbar buttons for the pickers functions.","title":"buttons"},{"location":"Options/#buttons_1","text":"Returns an Ojbect of options.buttons","title":"buttons"},{"location":"Options/#buttons-buttons","text":"Takes an Ojbect of boolean .","title":"buttons, [buttons]"},{"location":"Options/#throws_6","text":"TypeError - if buttons parameter is not an Ojbect","title":"Throws"},{"location":"Options/#widgetpositioning","text":"Default: { horizontal: 'auto' vertical: 'auto' } Accepts: object with the all or one of the parameters above horizontal: 'auto', 'left', 'right' vertical: 'auto', 'top', 'bottom'","title":"widgetPositioning"},{"location":"Options/#widgetpositioning_1","text":"Returns the currently set options.widgetPositioning object containing two keys horizontal and vertical","title":"widgetPositioning"},{"location":"Options/#widgetpositioning-positioningobject","text":"Takes an object parameter that can contain two keys vertical and horizontal each having a value of 'auto', 'top', 'bottom' for vertical and 'auto', 'left', 'right' for horizontal which defines where the dropdown with the widget will appear relative to the input element the component is attached to. 'auto' is the default value for both horizontal and vertical keys and it tries to automatically place the dropdown in a position that is visible to the user. Usually you should not override those options unless you have a special need in your layout.","title":"widgetPositioning, [positioningObject]"},{"location":"Options/#widgetparent","text":"Default: null Accepts: string or jQuery object On picker show, places the widget at the identifier (string) or jQuery object if the element has css position: 'relative'","title":"widgetParent"},{"location":"Options/#widgetparent_1","text":"Returns a $(element) variable with the currently set options.widgetParent option.","title":"widgetParent"},{"location":"Options/#widgetparent-widgetparent","text":"Takes a string or $(element) value.","title":"widgetParent, [widgetParent]"},{"location":"Options/#keepopen","text":"Default: false Will cause the date picker to stay open after selecting a date.","title":"keepOpen"},{"location":"Options/#keepopen_1","text":"Returns a boolean variable with the currently set options.keepOpen option.","title":"keepOpen"},{"location":"Options/#keepopen-boolean","text":"Takes a boolean value.","title":"keepOpen, [boolean]"},{"location":"Options/#inline","text":"Default: false Will display the picker inline without the need of a input field. This will also hide borders and shadows.","title":"inline"},{"location":"Options/#inline_1","text":"Returns a boolean variable with the currently set options.inline option.","title":"inline"},{"location":"Options/#inline-boolean","text":"Takes a boolean value.","title":"inline, [boolean]"},{"location":"Options/#keepinvalid","text":"4.7.14 Default: false Will cause the date picker to not revert or overwrite invalid dates.","title":"keepInvalid"},{"location":"Options/#keepinvalid_1","text":"Returns a string variable with the currently set options.keepInvalid option.","title":"keepInvalid"},{"location":"Options/#keepinvalid-boolean","text":"Takes a boolean value. If true , invalid dates will not be reverted to a previous selection or changed.","title":"keepInvalid, [boolean]"},{"location":"Options/#keybinds","text":"Default: up: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(7, 'd')); } else { this.date(this.date().clone().add(1, 'm')); } }, down: function (widget) { if (!widget) { this.show(); } else if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(7, 'd')); } else { this.date(this.date().clone().subtract(1, 'm')); } }, 'control up': function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'y')); } else { this.date(this.date().clone().add(1, 'h')); } }, 'control down': function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'y')); } else { this.date(this.date().clone().subtract(1, 'h')); } }, left: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'd')); } }, right: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'd')); } }, pageUp: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().subtract(1, 'M')); } }, pageDown: function (widget) { if (widget.find('.datepicker').is(':visible')) { this.date(this.date().clone().add(1, 'M')); } }, enter: function () { this.hide(); }, escape: function () { this.hide(); }, 'control space': function (widget) { if (widget.find('.timepicker').is(':visible')) { widget.find('.btn[data-action=\"togglePeriod\"]').click(); } }, t: function () { this.date(moment()); }, 'delete': function () { this.clear(); } Allows for custom events to fire on keyboard press.","title":"keyBinds"},{"location":"Options/#keybinds_1","text":"Returns a string variable with the currently set options.keyBinds option.","title":"keyBinds"},{"location":"Options/#keybinds-object","text":"Takes an object value. Allows for several keyBinding functions to be specified for ease of access or accessibility. See the options page for defaults.","title":"keyBinds, [object]"},{"location":"Options/#debug","text":"Default: false Will cause the date picker to stay open after a blur event.","title":"debug"},{"location":"Options/#ignorereadonly","text":"Default: false Allow date picker show event to fire even when the associated input element has the readonly=\"readonly\" property.","title":"ignoreReadonly"},{"location":"Options/#ignorereadonly_1","text":"Returns a boolean variable with the currently set options.ignoreReadonly option.","title":"ignoreReadonly"},{"location":"Options/#ignorereadonly-boolean","text":"Takes a boolean value. Set this to true to allow the picker to be used even if the input field is readonly . This will not bypass the disabled property","title":"ignoreReadonly, [boolean]"},{"location":"Options/#disabledtimeintervals","text":"Default: false Disables time selection between the given moments .","title":"disabledTimeIntervals"},{"location":"Options/#disabledtimeintervals_1","text":"Returns an array variable with the currently set options.disabledTimeIntervals option.","title":"disabledTimeIntervals"},{"location":"Options/#disabledtimeintervals-array","text":"Takes a array value. The array must be in the following format [moment(),moment()] For example: disabledTimeIntervals: [[moment({ h: 0 }), moment({ h: 8 })], [moment({ h: 18 }), moment({ h: 24 })]] Will disable times between 12-8am and 6-12pm today","title":"disabledTimeIntervals, [array]"},{"location":"Options/#allowinputtoggle","text":"Default: false If true , the picker will show on textbox focus and icon click when used in a button group.","title":"allowInputToggle"},{"location":"Options/#allowinputtoggle_1","text":"Returns a boolean variable with the currently set options.allowInputToggle option.","title":"allowInputToggle"},{"location":"Options/#allowinputtoggle-boolean","text":"Takes a boolean value. If true , the picker will show on textbox focus and icon click when used in a button group","title":"allowInputToggle, [boolean]"},{"location":"Options/#focusonshow","text":"Default: true If false , the textbox will not be given focus when the picker is shown.","title":"focusOnShow"},{"location":"Options/#focusonshow_1","text":"Returns a boolean variable with the currently set options.focusOnShow option.","title":"focusOnShow"},{"location":"Options/#focusonshow-boolean","text":"Takes a boolean value. If false , the textbox will not be given focus when the picker is shown","title":"focusOnShow, [boolean]"},{"location":"Options/#endisabledhours","text":"Default: false","title":"en/disabledHours"},{"location":"Options/#disabledhours","text":"Returns an array variable with the currently set options.en/disabledHours option.","title":"disabledHours"},{"location":"Options/#disabledhours-boolean","text":"Takes a array value. Must be in 24 hour format. Will allow or disallow hour selections (much like disabledTimeIntervals ) but will affect all days. Like en/disabledDates , these options are mutually exclusive and will reset one of the options back to false. disabledHours: [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 19, 20, 21, 22, 23, 24] enabledHours: [9, 10, 11, 12, 13, 14, 15, 16]","title":"disabledHours, boolean"},{"location":"Options/#viewdate","text":"Default: false This will change the viewDate without changing or setting the selected date.","title":"viewDate"},{"location":"Options/#parseinputdate","text":"","title":"parseInputDate"},{"location":"Options/#parseinputdate_1","text":"Returns a function with the currently set options.parseInputDate","title":"parseInputDate"},{"location":"Options/#parseinputdate-function","text":"Takes a function Allows custom input formatting For example: the user can enter 'yesterday' or '30 days ago. Example: var parseRelativeDate = function(relativeDate) { switch (relativeDate) { case 'today': return moment() case 'yesterday': return moment().subtract(1, 'day'); default: return moment() .subtract(Number(relativeDate.replace(\"days ago\", \"\").trim()), 'days'); } } var parseInputDate = function(inputDate) { var relativeDatePattern = /today|yesterday|[0-9]+\\s+(days ago)/, resultDate; if (moment.isMoment(inputDate) || inputDate instanceof Date) { resultDate = moment(inputDate); } else { var relativeDate = inputDate.match(relativeDatePattern), parseDate = null; if (relativeDate !== null) parseDate = this.parseRelativeDate(inputDate.match(relativeDatePattern)[0]); else parseDate = moment(); resultDate = moment(parseDate, \"YYYY-MM-DD\"); } return resultDate; }","title":"parseInputDate, [function]"},{"location":"Options/#tooltips","text":"tooltips: { today: 'Go to today', clear: 'Clear selection', close: 'Close the picker', selectMonth: 'Select Month', prevMonth: 'Previous Month', nextMonth: 'Next Month', selectYear: 'Select Year', prevYear: 'Previous Year', nextYear: 'Next Year', selectDecade: 'Select Decade', prevDecade: 'Previous Decade', nextDecade: 'Next Decade', prevCentury: 'Previous Century', nextCentury: 'Next Century',, incrementHour: 'Increment Hour', pickHour: 'Pick Hour', decrementHour:'Decrement Hour', incrementMinute: 'Increment Minute', pickMinute: 'Pick Minute', decrementMinute:'Decrement Minute', incrementSecond: 'Increment Second', pickSecond: 'Pick Second', decrementSecond:'Decrement Second' } This will change the tooltips over each icon to a custom string.","title":"tooltips"},{"location":"Options/#tooltips_1","text":"Returns an Ojbect of options.tooltips","title":"tooltips"},{"location":"Options/#tooltips-tooltips","text":"Takes an Ojbect of strings .","title":"tooltips, [tooltips]"},{"location":"Options/#throws_7","text":"TypeError - if tooltips parameter is not an Ojbect","title":"Throws"},{"location":"Options/#timezone","text":"timeZone: '' Allows the setting of the Time Zone. You must include moment-timezone.js and moment-timzone data. See moment timezone documentation for usage.","title":"timeZone"},{"location":"Options/#timezone_1","text":"Returns an string of options.timeZone","title":"timeZone"},{"location":"Options/#timezone-timezone","text":"Takes an string of a valid timezone.","title":"timeZone, [timeZone]"},{"location":"Options/#throws_8","text":"TypeError - if tooltips parameter is not an string","title":"Throws"},{"location":"Options/#allowmultidate","text":"allowMultidate: false Allows the setting of multiple dates.","title":"allowMultidate"},{"location":"Options/#allowmultidate_1","text":"Returns an boolean of options.allowMultidate","title":"allowMultidate"},{"location":"Options/#allowmultidate-allowmultidate","text":"Takes an boolean .","title":"allowMultidate, [allowMultidate]"},{"location":"Options/#throws_9","text":"TypeError - if allowMultidate parameter is not an boolean","title":"Throws"},{"location":"Options/#multidateseparator","text":"multidateSeparator: ',' Used with allowMultidate . E.g. 1/1/2017,1/2/2017","title":"multidateSeparator"},{"location":"Options/#multidateseparator_1","text":"Returns an string of options.multidateSeparator","title":"multidateSeparator"},{"location":"Options/#multidateseparator-multidateseparator","text":"Takes an string of a valid timezone.","title":"multidateSeparator, [multidateSeparator]"},{"location":"Options/#throws_10","text":"TypeError - if multidateSeparator parameter is not an string TypeError - if multidateSeparator parameter is longer then 1 character","title":"Throws"},{"location":"Usage/","text":"Bootstrap4 v5 Docs Note All functions are accessed via the $('#datetimepicker').datetimepicker(FUNCTION) Minimum Setup $(function () { $('#datetimepicker1').datetimepicker(); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker1\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker1\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker1\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker1').datetimepicker(); }); </script> </div> </div> Using Locales $(function () { $('#datetimepicker2').datetimepicker({ locale: 'ru' }); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker2\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker2\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker2\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker2').datetimepicker({ locale: 'ru' }); }); </script> </div> </div> Time Only $(function () { $('#datetimepicker3').datetimepicker({ format: 'LT' }); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker3\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker3\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker3\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-clock-o\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker3').datetimepicker({ format: 'LT' }); }); </script> </div> </div> Date Only $(function () { $('#datetimepicker4').datetimepicker({ format: 'L' }); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker4\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker4\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker4\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker4').datetimepicker({ format: 'L' }); }); </script> </div> </div> No Icon (input field only): $(function () { $('#datetimepicker5').datetimepicker(); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"datetimepicker5\" data-toggle=\"datetimepicker\" data-target=\"#datetimepicker5\"/> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker5').datetimepicker(); }); </script> </div> </div> Enabled/Disabled Dates $(function () { $('#datetimepicker6').datetimepicker({ defaultDate: \"11/1/2013\", disabledDates: [ moment(\"12/25/2013\"), new Date(2013, 11 - 1, 21), \"11/22/2013 00:53\" ] }); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker6\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker6\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker6\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker6').datetimepicker({ defaultDate: \"11/1/2013\", disabledDates: [ moment(\"12/25/2013\"), new Date(2013, 11 - 1, 21), \"11/22/2013 00:53\" ] }); }); </script> </div> </div> Linked Pickers $(function () { $('#datetimepicker7').datetimepicker(); $('#datetimepicker8').datetimepicker({ useCurrent: false }); $(\"#datetimepicker7\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker8').datetimepicker('minDate', e.date); }); $(\"#datetimepicker8\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker7').datetimepicker('maxDate', e.date); }); }); Code <div class=\"container\"> <div class='col-md-5'> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker7\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker7\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker7\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <div class='col-md-5'> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker8\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker8\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker8\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker7').datetimepicker(); $('#datetimepicker8').datetimepicker({ useCurrent: false }); $(\"#datetimepicker7\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker8').datetimepicker('minDate', e.date); }); $(\"#datetimepicker8\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker7').datetimepicker('maxDate', e.date); }); }); </script> Custom Icons $(function () { $('#datetimepicker9').datetimepicker({ icons: { time: \"fa fa-clock-o\", date: \"fa fa-calendar\", up: \"fa fa-arrow-up\", down: \"fa fa-arrow-down\" } }); }); Code <div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker9\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker9\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker9\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker9').datetimepicker({ icons: { time: \"fa fa-clock-o\", date: \"fa fa-calendar\", up: \"fa fa-arrow-up\", down: \"fa fa-arrow-down\" } }); }); </script> </div> View Mode $(function () { $('#datetimepicker10').datetimepicker({ viewMode: 'years' }); }); Code <div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker10\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker10\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker10\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker10').datetimepicker({ viewMode: 'years' }); }); </script> </div> Min View Mode $(function () { $('#datetimepicker11').datetimepicker({ viewMode: 'years', format: 'MM/YYYY' }); }); Code <div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker11\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker11\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker11\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker11').datetimepicker({ viewMode: 'years', format: 'MM/YYYY' }); }); </script> </div> Disabled Days of the Week $(function () { $('#datetimepicker12').datetimepicker({ daysOfWeekDisabled: [0, 6] }); }); Code <div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker12\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker12\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker12\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker12').datetimepicker({ daysOfWeekDisabled: [0, 6] }); }); </script> </div> Inline $(function () { $('#datetimepicker13').datetimepicker({ inline: true, sideBySide: true, buttons:{ showToday:true } }); }); Code <div style=\"overflow:hidden;\"> <div class=\"form-group\"> <div class=\"row\"> <div class=\"col-md-8\"> <div id=\"datetimepicker13\"></div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker13').datetimepicker({ inline: true, sideBySide: true }); }); </script> </div> Multidate $(function () { $('#datetimepicker14').datetimepicker({ allowMultidate: true, multidateSeparator: ',', format: 'L' //this is here just to make the demo prettier. }); }); Code <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker14\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker14\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker14\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker14').datetimepicker({ allowMultidate: true, multidateSeparator: ',' }); }); </script> </div> </div> Setting Options Set Option $(function () { $('#datetimepicker15').datetimepicker(); $('#setOption').click(function () { $('#datetimepicker15').datetimepicker('daysOfWeekDisabled', [0, 6]); }); });","title":"Usage"},{"location":"Usage/#bootstrap4-v5-docs","text":"Note All functions are accessed via the $('#datetimepicker').datetimepicker(FUNCTION)","title":"Bootstrap4 v5 Docs"},{"location":"Usage/#minimum-setup","text":"$(function () { $('#datetimepicker1').datetimepicker(); });","title":"Minimum Setup"},{"location":"Usage/#code","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker1\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker1\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker1\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker1').datetimepicker(); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#using-locales","text":"$(function () { $('#datetimepicker2').datetimepicker({ locale: 'ru' }); });","title":"Using Locales"},{"location":"Usage/#code_1","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker2\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker2\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker2\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker2').datetimepicker({ locale: 'ru' }); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#time-only","text":"$(function () { $('#datetimepicker3').datetimepicker({ format: 'LT' }); });","title":"Time Only"},{"location":"Usage/#code_2","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker3\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker3\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker3\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-clock-o\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker3').datetimepicker({ format: 'LT' }); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#date-only","text":"$(function () { $('#datetimepicker4').datetimepicker({ format: 'L' }); });","title":"Date Only"},{"location":"Usage/#code_3","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker4\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker4\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker4\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker4').datetimepicker({ format: 'L' }); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#no-icon-input-field-only","text":"$(function () { $('#datetimepicker5').datetimepicker(); });","title":"No Icon (input field only):"},{"location":"Usage/#code_4","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <input type=\"text\" class=\"form-control datetimepicker-input\" id=\"datetimepicker5\" data-toggle=\"datetimepicker\" data-target=\"#datetimepicker5\"/> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker5').datetimepicker(); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#enableddisabled-dates","text":"$(function () { $('#datetimepicker6').datetimepicker({ defaultDate: \"11/1/2013\", disabledDates: [ moment(\"12/25/2013\"), new Date(2013, 11 - 1, 21), \"11/22/2013 00:53\" ] }); });","title":"Enabled/Disabled Dates"},{"location":"Usage/#code_5","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker6\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker6\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker6\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker6').datetimepicker({ defaultDate: \"11/1/2013\", disabledDates: [ moment(\"12/25/2013\"), new Date(2013, 11 - 1, 21), \"11/22/2013 00:53\" ] }); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#linked-pickers","text":"$(function () { $('#datetimepicker7').datetimepicker(); $('#datetimepicker8').datetimepicker({ useCurrent: false }); $(\"#datetimepicker7\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker8').datetimepicker('minDate', e.date); }); $(\"#datetimepicker8\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker7').datetimepicker('maxDate', e.date); }); });","title":"Linked Pickers"},{"location":"Usage/#code_6","text":"<div class=\"container\"> <div class='col-md-5'> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker7\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker7\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker7\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <div class='col-md-5'> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker8\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker8\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker8\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker7').datetimepicker(); $('#datetimepicker8').datetimepicker({ useCurrent: false }); $(\"#datetimepicker7\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker8').datetimepicker('minDate', e.date); }); $(\"#datetimepicker8\").on(\"change.datetimepicker\", function (e) { $('#datetimepicker7').datetimepicker('maxDate', e.date); }); }); </script>","title":"Code"},{"location":"Usage/#custom-icons","text":"$(function () { $('#datetimepicker9').datetimepicker({ icons: { time: \"fa fa-clock-o\", date: \"fa fa-calendar\", up: \"fa fa-arrow-up\", down: \"fa fa-arrow-down\" } }); });","title":"Custom Icons"},{"location":"Usage/#code_7","text":"<div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker9\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker9\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker9\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker9').datetimepicker({ icons: { time: \"fa fa-clock-o\", date: \"fa fa-calendar\", up: \"fa fa-arrow-up\", down: \"fa fa-arrow-down\" } }); }); </script> </div>","title":"Code"},{"location":"Usage/#view-mode","text":"$(function () { $('#datetimepicker10').datetimepicker({ viewMode: 'years' }); });","title":"View Mode"},{"location":"Usage/#code_8","text":"<div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker10\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker10\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker10\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker10').datetimepicker({ viewMode: 'years' }); }); </script> </div>","title":"Code"},{"location":"Usage/#min-view-mode","text":"$(function () { $('#datetimepicker11').datetimepicker({ viewMode: 'years', format: 'MM/YYYY' }); });","title":"Min View Mode"},{"location":"Usage/#code_9","text":"<div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker11\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker11\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker11\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker11').datetimepicker({ viewMode: 'years', format: 'MM/YYYY' }); }); </script> </div>","title":"Code"},{"location":"Usage/#disabled-days-of-the-week","text":"$(function () { $('#datetimepicker12').datetimepicker({ daysOfWeekDisabled: [0, 6] }); });","title":"Disabled Days of the Week"},{"location":"Usage/#code_10","text":"<div class=\"container\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker12\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker12\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker12\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker12').datetimepicker({ daysOfWeekDisabled: [0, 6] }); }); </script> </div>","title":"Code"},{"location":"Usage/#inline","text":"$(function () { $('#datetimepicker13').datetimepicker({ inline: true, sideBySide: true, buttons:{ showToday:true } }); });","title":"Inline"},{"location":"Usage/#code_11","text":"<div style=\"overflow:hidden;\"> <div class=\"form-group\"> <div class=\"row\"> <div class=\"col-md-8\"> <div id=\"datetimepicker13\"></div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker13').datetimepicker({ inline: true, sideBySide: true }); }); </script> </div>","title":"Code"},{"location":"Usage/#multidate","text":"$(function () { $('#datetimepicker14').datetimepicker({ allowMultidate: true, multidateSeparator: ',', format: 'L' //this is here just to make the demo prettier. }); });","title":"Multidate"},{"location":"Usage/#code_12","text":"<div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-6\"> <div class=\"form-group\"> <div class=\"input-group date\" id=\"datetimepicker14\" data-target-input=\"nearest\"> <input type=\"text\" class=\"form-control datetimepicker-input\" data-target=\"#datetimepicker14\"/> <div class=\"input-group-append\" data-target=\"#datetimepicker14\" data-toggle=\"datetimepicker\"> <div class=\"input-group-text\"><i class=\"fa fa-calendar\"></i></div> </div> </div> </div> </div> <script type=\"text/javascript\"> $(function () { $('#datetimepicker14').datetimepicker({ allowMultidate: true, multidateSeparator: ',' }); }); </script> </div> </div>","title":"Code"},{"location":"Usage/#setting-options","text":"Set Option $(function () { $('#datetimepicker15').datetimepicker(); $('#setOption').click(function () { $('#datetimepicker15').datetimepicker('daysOfWeekDisabled', [0, 6]); }); });","title":"Setting Options"}]}